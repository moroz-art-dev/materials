{
  "title": {
    "en": "Projects",
    "uk": "Проекти",
    "ru": "Проекты"
  },
  "imageBaseUrl": "https://raw.githubusercontent.com/moroz-art-dev/",
  "list": [
    {
      "id": "tickets-filter",
      "title": {
        "en": "Tickets Filter",
        "uk": "Фільтр квитків",
        "ru": "Фильтр билетов"
      },
      "description": {
        "en": "This single-page React application is designed to filter and sort flight tickets. It provides users with an intuitive interface to search, filter, and sort flight tickets based on various criteria. The project supports multiple languages, offering a localized experience with i18n.",
        "uk": "Це односторінковий додаток на React, розроблений для фільтрації та сортування авіаквитків. Додаток забезпечує інтуїтивний інтерфейс для пошуку, фільтрації та сортування квитків за різними критеріями. Проєкт підтримує кілька мов завдяки i18n.",
        "ru": "Это одностраничное приложение на React, предназначенное для фильтрации и сортировки авиабилетов. Приложение предоставляет интуитивный интерфейс для поиска, фильтрации и сортировки билетов по различным критериям. Проект поддерживает несколько языков с помощью i18n."
      },
      "feature": {
        "en": "This project showcases a modular React architecture for filtering and sorting flight tickets, with a clear separation of UI and business logic. Users can filter results by price, duration, and airlines. The app includes internationalization (i18n) for localization. State management is simplified using React’s Context API, without the need for external libraries. The project’s structure, with distinct folders for components, containers, and tools, enhances its scalability and maintainability.",
        "uk": "У цьому проєкті демонструється модульна архітектура на React для фільтрації та сортування авіаквитків, із чітким розподілом між інтерфейсом та бізнес-логікою. Користувачі можуть фільтрувати результати за ціною, тривалістю і авіакомпаніями. Додаток підтримує інтернаціоналізацію (i18n). Управління станом здійснюється через Context API від React, без потреби у зовнішніх бібліотеках. Структура проєкту, що включає окремі папки для компонентів, контейнерів та інструментів, покращує масштабованість і підтримуваність.",
        "ru": "Этот проект демонстрирует модульную архитектуру на React для фильтрации и сортировки авиабилетов с четким разделением между интерфейсом и бизнес-логикой. Пользователи могут фильтровать результаты по цене, длительности и авиакомпаниям. Приложение поддерживает интернационализацию (i18n). Управление состоянием упрощается с помощью Context API от React, без использования внешних библиотек. Структура проекта с отдельными папками для компонентов, контейнеров и инструментов улучшает его масштабируемость и поддерживаемость."
      },
      "technologies": [
        "React",
        "Redux Toolkit",
        "Sass",
        "TypeScript",
        "React Router",
        "i18next",
        "Classnames",
        "Lodash"
      ],
      "imagesSubcategorySrc": "flight-tickets-filter/main/screenshots/",
      "imagesSrc": ["screenshot_1.png", "screenshot_2.png"],
      "url": "https://github.com/moroz-art-dev/flight-tickets-filter",
      "demo": "https://moroz-art-dev.github.io/flight-tickets-filter/"
    },
    {
      "id": "frontend-portfolio",
      "title": {
        "en": "Frontend Portfolio",
        "uk": "Портфоліо Фронтенд",
        "ru": "Портфолио Фронтенд"
      },
      "description": {
        "en": "This is a personal portfolio project developed using Next.js to showcase my frontend development skills. The application features a fully responsive design, theme switching (light/dark), and multilingual support. It includes sections for projects, certifications, and technical expertise. The project leverages modern frontend technologies such as TypeScript, Chakra UI, and SCSS, ensuring scalability and maintainability. API integrations are handled using Axios and SWR for efficient data fetching.",
        "uk": "Це персональний проєкт портфоліо, розроблений на базі Next.js для демонстрації моїх навичок у фронтенд-розробці. Додаток має повністю адаптивний дизайн, перемикання тем (світла/темна) та підтримку багатомовності. Він включає розділи для проєктів, сертифікатів та технічної експертизи. Проєкт використовує сучасні фронтенд-технології, такі як TypeScript, Chakra UI та SCSS, що забезпечує масштабованість та легкість у підтримці. API інтегруються за допомогою Axios і SWR для ефективного отримання даних.",
        "ru": "Это персональный проект портфолио, разработанный с использованием Next.js для демонстрации моих навыков в frontend-разработке. Приложение включает полностью адаптивный дизайн, переключение тем (светлая/темная) и поддержку нескольких языков. Оно включает разделы для проектов, сертификатов и технической экспертизы. Проект использует современные frontend-технологии, такие как TypeScript, Chakra UI и SCSS, обеспечивая масштабируемость и удобство поддержки. Интеграция с API осуществляется через Axios и SWR для эффективной загрузки данных."
      },
      "feature": {
        "en": "The project is organized with a clear separation between business logic and UI components, ensuring high modularity and ease of maintenance. Providers are used for language management (Next-Intl), font loading, and Chakra UI theme settings. The project maximally utilizes Chakra's theme capabilities, with centralized size and color values, simplifying scalability. State management is handled without additional libraries, as the project doesn't require complex state logic. HOC components are used for logic reuse across different parts of the app. Modularity and decomposition are key features, making the project flexible and well-structured.",
        "uk": "Проєкт організований з чітким розділенням бізнес-логіки та UI-компонентів, що забезпечує високу модульність та зручність підтримки. Використовуються провайдери для керування мовою (Next-Intl), завантаження шрифтів і налаштувань теми Chakra UI. Проєкт максимально використовує можливості теми Chakra, централізуючи значення розмірів і кольорів, що спрощує масштабованість. Управління станом здійснюється без додаткових бібліотек, оскільки проєкт не вимагає складної логіки стану. Використовуються HOC-компоненти для повторного використання логіки у різних частинах додатка. Модульність і декомпозиція — ключові особливості, що роблять проєкт гнучким і структурованим.",
        "ru": "Проект организован с четким разделением бизнес-логики и UI-компонентов, что обеспечивает высокую модульность и легкость в поддержке. Используются провайдеры для управления языковыми настройками (Next-Intl), загрузки шрифтов и темой Chakra UI. В проекте реализовано максимальное использование возможностей темы Chakra: размеры и цвета централизованы в ее настройках, что упрощает дальнейшее масштабирование и поддержку. Управление состоянием не требует дополнительных библиотек, так как проект не нуждается в сложной логике состояния. Также используются HOC-компоненты для повторного использования логики в разных частях приложения. Модульность и декомпозиция — ключевые особенности, делающие проект гибким и структурированным."
      },
      "technologies": [
        "Next.js",
        "React",
        "TypeScript",
        "Chakra UI",
        "SCSS",
        "Axios",
        "Lodash",
        "Next-Intl",
        "React Icons",
        "React Query",
        "SWR"
      ],
      "imagesSubcategorySrc": "frontend-portfolio/main/screenshots/",
      "imagesSrc": ["screenshot_1.png", "screenshot_2.png", "screenshot_3.png"],
      "url": "https://github.com/moroz-art-dev/frontend-portfolio",
      "demo": "https://moroz-art-dev.vercel.app"
    },
    {
      "id": "news-app",
      "title": {
        "en": "News",
        "uk": "Новини",
        "ru": "Новости"
      },
      "description": {
        "en": "News App is a React-based application designed for retrieving and displaying news articles from an API. The app allows users to customize their news feed by using a user-friendly filter form. It provides two blocks for displaying the articles based on the user's selected preferences. The simple and intuitive interface ensures an easy way to consume news while allowing users to personalize their experience according to their interests.",
        "uk": "Новинний додаток – це додаток на базі React, призначений для отримання та відображення новин із API. Додаток дозволяє користувачам налаштовувати свою стрічку новин за допомогою зручної форми фільтра. Він надає два блоки для відображення новин відповідно до обраних користувачем параметрів. Простий та інтуїтивний інтерфейс забезпечує легкий доступ до новин та можливість персоналізувати досвід відповідно до інтересів користувача.",
        "ru": "Новостное приложение — это приложение на базе React, предназначенное для получения и отображения новостей из API. Приложение позволяет пользователям настраивать свою новостную ленту с помощью удобной формы фильтра. Оно предоставляет два блока для отображения новостей на основе выбранных пользователем предпочтений. Простой и интуитивно понятный интерфейс обеспечивает легкий доступ к новостям и возможность персонализировать пользовательский опыт в соответствии с интересами."
      },
      "feature": {
        "en": "This news application is built with React and retrieves articles from an external API. It features a customizable news feed where users can select their preferences through a form and view the corresponding articles. The application architecture is simple, with components organized by functionality. It uses React Hook Form for managing form state, MobX for state management, and Tailwind CSS for styling. Additionally, the app integrates Axios for API requests and React HTML Parser for parsing article content.",
        "uk": "Це новинний додаток, побудований на React, який отримує новини з зовнішнього API. Додаток має функцію налаштування стрічки новин, де користувачі можуть вибирати свої переваги через форму та переглядати відповідні статті. Архітектура додатка проста, компоненти організовані за функціональністю. Для управління станом форми використовується React Hook Form, для управління загальним станом — MobX, а для стилізації — Tailwind CSS. Крім того, додаток інтегрує Axios для запитів до API та React HTML Parser для парсингу вмісту статей.",
        "ru": "Это новостное приложение, построенное на React, которое получает новости из внешнего API. Приложение имеет функцию настройки новостной ленты, где пользователи могут выбирать свои предпочтения через форму и просматривать соответствующие статьи. Архитектура приложения простая, компоненты организованы по функциональности. Для управления состоянием формы используется React Hook Form, для управления общим состоянием — MobX, а для стилизации — Tailwind CSS. Кроме того, приложение интегрирует Axios для запросов к API и React HTML Parser для парсинга содержимого статей."
      },
      "technologies": [
        "React",
        "React Hook Form",
        "Axios",
        "MobX",
        "MobX React Lite",
        "FontAwesome",
        "Tailwind CSS",
        "React HTML Parser",
        "Vite"
      ],
      "imagesSubcategorySrc": "news-app/main/screenshots/",
      "imagesSrc": ["screenshot_1.png", "screenshot_2.png", "screenshot_3.png"],
      "url": "https://github.com/moroz-art-dev/news-app",
      "demo": "https://news-app-eight-amber.vercel.app"
    },
    {
      "id": "little-lemon",
      "title": {
        "en": "Little Lemon",
        "uk": "Little Lemon",
        "ru": "Little Lemon"
      },
      "description": {
        "en": "The Little Lemon project is a single-page application developed as part of the Meta Front-End Developer course. It includes a landing page and a table reservation form for a restaurant. The app provides essential information about the restaurant and allows users to book tables through an intuitive and multi-step reservation form. The project showcases frontend development techniques and was created as part of my professional development and upskilling process.",
        "uk": "Проект Little Lemon – це односторінковий додаток, розроблений у рамках курсу Meta Front-End Developer. Він включає посадкову сторінку та форму бронювання столика для ресторану. Додаток надає основну інформацію про ресторан та дозволяє користувачам бронювати столики через інтуїтивно зрозумілу багатокрокову форму бронювання. Проєкт демонструє техніки фронтенд-розробки та був створений в рамках мого професійного розвитку та підвищення кваліфікації.",
        "ru": "Проект Little Lemon — это одностраничное приложение, разработанное в рамках курса Meta Front-End Developer. Оно включает в себя посадочную страницу и форму бронирования столика для ресторана. Приложение предоставляет основную информацию о ресторане и позволяет пользователям бронировать столики через интуитивно понятную многошаговую форму бронирования. Проект демонстрирует техники frontend-разработки и был создан в рамках моего профессионального развития и повышения квалификации."
      },
      "feature": {
        "en": "The Little Lemon project is a simple single-page application featuring a landing page and a multi-step form for table reservations at a restaurant. The app is built using React and leverages various libraries such as React Router for routing, Formik and Yup for form handling and validation, and React Modal for modal dialogs. The project also includes dynamic UI elements like a star rating system and a scroll-to-top arrow. It was developed as part of the Meta Front-End Developer course to improve theoretical and practical skills.",
        "uk": "Проєкт Little Lemon – це простий односторінковий додаток, що включає посадкову сторінку та багатокрокову форму для бронювання столиків у ресторані. Додаток побудований за допомогою React та використовує різні бібліотеки, такі як React Router для маршрутизації, Formik та Yup для обробки та валідації форм, а також React Modal для модальних вікон. Проєкт також містить динамічні елементи інтерфейсу, як-от система оцінювання за допомогою зірок та стрілка прокрутки вгору. Він був розроблений у рамках курсу Meta Front-End Developer для покращення теоретичних та практичних навичок.",
        "ru": "Проект Little Lemon — это простое одностраничное приложение с посадочной страницей и многошаговой формой для бронирования столиков в ресторане. Приложение построено с использованием React и использует различные библиотеки, такие как React Router для маршрутизации, Formik и Yup для обработки и валидации форм, а также React Modal для модальных окон. Проект также включает динамические элементы интерфейса, такие как система рейтинга с помощью звезд и кнопка прокрутки наверх. Он был разработан в рамках курса Meta Front-End Developer для повышения теоретических и практических навыков."
      },
      "technologies": [
        "React",
        "React Router",
        "Formik",
        "Prop Types",
        "React Modal",
        "React Scroll",
        "React Select",
        "React Transition Group",
        "Yup"
      ],
      "imagesSubcategorySrc": "little-lemon/main/screenshots/",
      "imagesSrc": [
        "screenshot_1.png",
        "screenshot_2.png",
        "screenshot_3.png",
        "screenshot_4.png",
        "screenshot_5.png",
        "screenshot_6.png"
      ],
      "url": "https://github.com/moroz-art-dev/little-lemon",
      "demo": "https://moroz-art-dev.github.io/little-lemon/"
    },
    {
      "id": "live-search",
      "title": {
        "en": "Live Search",
        "uk": "Живий пошук",
        "ru": "Живой поиск"
      },
      "description": {
        "en": "Live search is a lightweight React project featuring a search input and dynamic result list fetched from an API. Users can quickly find content by typing a query and seeing instant results, with additional results loaded as they scroll. The search results limit is configurable, offering more control over the displayed content.",
        "uk": "Живий пошук — це легкий проєкт на базі React, що включає поле пошуку та динамічний список результатів, отриманих із API. Користувачі можуть швидко знаходити контент, вводячи запит, і миттєво бачити результати, а додатковий контент підвантажується при прокручуванні сторінки. Ліміт результатів можна налаштувати, що дає більше контролю над відображуваним контентом.",
        "ru": "Живой поиск — это легкий проект на React, включающий поле поиска и динамический список результатов, полученных через API. Пользователи могут быстро находить контент, вводя запрос, и мгновенно видеть результаты, с дополнительной подгрузкой при прокрутке страницы. Лимит отображаемых результатов можно настроить, предоставляя больше контроля над контентом."
      },
      "feature": {
        "en": "Built with Next.js and TypeScript, the Live Search app utilizes Material-UI (MUI) for the interface and Redux Toolkit for state management. It provides instant API-driven search results, dynamically loading additional results as users scroll. The modular structure ensures easy maintenance and scalability, while users can adjust the maximum number of displayed results for better customization.",
        "uk": "Додаток Живий пошук, побудований на базі Next.js та TypeScript, використовує Material-UI (MUI) для інтерфейсу та Redux Toolkit для управління станом. Він надає миттєві результати пошуку через API з динамічним завантаженням додаткових результатів під час прокручування. Модульна структура забезпечує простоту підтримки та масштабованість, а користувачі можуть налаштувати максимальну кількість відображуваних результатів для більшої персоналізації.",
        "ru": "Приложение Живой поиск, построенное на Next.js и TypeScript, использует Material-UI (MUI) для интерфейса и Redux Toolkit для управления состоянием. Оно обеспечивает мгновенные результаты поиска через API с динамической подгрузкой дополнительных результатов при прокрутке. Модульная структура упрощает поддержку и масштабируемость, а пользователи могут настроить максимальное количество отображаемых результатов для лучшей персонализации."
      },
      "technologies": [
        "Next.js",
        "TypeScript",
        "MUI (Material-UI)",
        "Redux Toolkit"
      ],
      "imagesSubcategorySrc": "live-search/main/screenshots/",
      "imagesSrc": ["screenshot_1.png"],
      "url": "https://github.com/moroz-art-dev/live-search",
      "demo": "https://live-search-kappa.vercel.app"
    },
    {
      "id": "portfolio",
      "title": {
        "en": "Portfolio",
        "uk": "Портфоліо",
        "ru": "Портфолио"
      },
      "description": {
        "en": "This is a single-page React portfolio application that showcases my software development projects and achievements. It includes sections for projects, skills, certificates, and a contact form for demonstration purposes. The application leverages modern frontend technologies, ensuring a fully responsive design and an intuitive user experience.",
        "uk": "Це односторінкове портфоліо на React, яке демонструє мої проєкти та досягнення у розробці програмного забезпечення. Воно включає розділи для проєктів, навичок, сертифікатів та форму зворотного зв'язку для демонстраційних цілей. Додаток використовує сучасні фронтенд-технології, забезпечуючи повністю адаптивний дизайн та інтуїтивний інтерфейс.",
        "ru": "Это одностраничное портфолио на React, демонстрирующее мои проекты и достижения в разработке программного обеспечения. Оно включает разделы для проектов, навыков, сертификатов и форму обратной связи для демонстрационных целей. Приложение использует современные frontend-технологии, обеспечивая полностью адаптивный дизайн и интуитивно понятный интерфейс."
      },
      "feature": {
        "en": "The portfolio is structured with several key sections: projects, skills, and certificates. It also features a contact form for demonstration purposes. The project is built using Chakra UI for styling, ensuring full responsiveness across devices. Redux Toolkit is employed for state management, while Formik and Yup handle form validation. The overall structure is simple and organized, with components grouped by functionality, making the project easy to extend and maintain.",
        "uk": "Портфоліо має кілька ключових розділів: проєкти, навички та сертифікати. Також додаток включає форму зворотного зв'язку для демонстраційних цілей. Проєкт побудований з використанням Chakra UI для стилізації, що забезпечує повну адаптивність на різних пристроях. Для управління станом використовується Redux Toolkit, а для валідації форм — Formik та Yup. Загальна структура проста та організована, компоненти згруповані за функціональністю, що робить проєкт легким у підтримці та розширенні.",
        "ru": "Портфолио структурировано с несколькими ключевыми разделами: проекты, навыки и сертификаты. Также приложение включает форму обратной связи для демонстрационных целей. Проект построен с использованием Chakra UI для стилизации, что обеспечивает полную адаптивность на различных устройствах. Для управления состоянием используется Redux Toolkit, а для валидации форм — Formik и Yup. Общая структура простая и организованная, компоненты сгруппированы по функциональности, что делает проект легким для поддержки и расширения."
      },
      "technologies": [
        "React",
        "React Slick",
        "Chakra UI",
        "Formik",
        "Yup",
        "Redux Toolkit",
        "RTK Query"
      ],
      "imagesSubcategorySrc": "portfolio/main/screenshots/",
      "imagesSrc": ["screenshot_1.png", "screenshot_2.png"],
      "url": "https://github.com/moroz-art-dev/portfolio",
      "demo": "https://moroz-art-dev.github.io/portfolio/"
    }
  ]
}
